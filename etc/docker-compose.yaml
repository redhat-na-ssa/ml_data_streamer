version: '3.7'

# NETWORKING README
#   This docker compose assumes a networking architecture where:
#     1)  containers are not in the same pod
#     2)  containers bind to the host and use the "port mapping" technique for deconfliction.
#   The above assumptions occurs by default when running this docker-compose in rootless podman4 via the default slirp4netns network setup:
#     https://github.com/containers/podman/blob/main/docs/tutorials/basic_networking.md#slirp4netns
#
#   As such, the containers created as per this compose file are configured to all bind to different ports on the host.
#   You need to ensure your host is not already running processes that bind to ports specified in this docker-compose file.
#   Also, this docker-compose file assumes that the host (and subsequently all containers bound to it) is resolvable by the name:  rht.
#   To accomplish this, it is recommended that you add an entry with the name "rht" to your /etc/hosts.  ie:
#       192.168.122.1     rht

services:

  ftools:
    container_name: ftools
    image: quay.io/jbride/ftools:0.0.6
    networks:
      - rht-ml

  zookeeper:
    container_name: zookeeper
    image: quay.io/strimzi/kafka:latest-kafka-3.1.2
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - rht-ml


      # "bin/kafka-server-start.sh config/server.properties --override listeners=INSIDE://:9092,OUTSIDE://:9094 --override listener.security.protocol.map=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT --override advertised.listeners=INSIDE://:9092,OUTSIDE://localhost:9094 --override zookeeper.connect=rht:2181 --override inter.broker.listener.name=INSIDE"
      
# https://github.com/pubnub/kafka-bridge/blob/master/kafka/plain/docker-compose.yaml
#   Allows for kafka client that is external to the container network (ie: on the host) to connect to this Kafka broker and consume messages
#   NOTE: via this configuration, kafka is available to external clients on host at: "rht:9094"
  kafka:
    container_name: kafka
    image: quay.io/strimzi/kafka:latest-kafka-3.1.2
    command: [
      # Test using the following:
      #   $ podman run -it --rm --entrypoint /bin/bash  quay.io/jbride/ftools:0.0.3 -c "kcat -b rht:9092 -L"
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties \
          --override zookeeper.connect=rht:2181 \
          --override listeners=INSIDE://:9092,OUTSIDE://:9094 --override listener.security.protocol.map=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT \
          --override advertised.listeners=INSIDE://rht:9092,OUTSIDE://rht:9094 \
          --override inter.broker.listener.name=INSIDE"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      LOG_DIR: "/tmp/logs"
    networks:
      - rht-ml

  kafdrop:
    container_name: kafdrop
    image: docker.io/obsidiandynamics/kafdrop:3.30.0
    restart: always
    ports:
      - "8000:9000"
    environment:
      KAFKA_BROKERCONNECT: "rht:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
    depends_on:
      - kafka
    networks:
      - rht-ml

  minio:
    container_name: minio
    image: quay.io/minio/minio:RELEASE.2022-09-17T00-09-45Z.fips
    entrypoint: >
      /bin/sh -c "
      /usr/bin/docker-entrypoint.sh minio server /data --console-address :9001
      "
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:

      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123

      # Used by minio console to invoke minio REST APIs
      MINIO_SERVER_URL: 'http://localhost:9000'
    networks:
      - rht-ml

networks:
  rht-ml:
    name: rht-ml
    driver: bridge
